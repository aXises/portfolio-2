// Generated by CoffeeScript 1.12.7
(function() {
  var baseItem, collection, item,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  baseItem = (function() {
    function baseItem(name1, status1, type1, link1) {
      this.name = name1;
      this.status = status1;
      this.type = type1;
      this.link = link1;
      this.childrens;
    }

    baseItem.prototype.setName = function(name) {
      this.name = name;
    };

    baseItem.prototype.setStatus = function(status) {
      this.status = status;
    };

    baseItem.prototype.setType = function(type) {
      this.type = type;
    };

    baseItem.prototype.setLink = function(link) {
      this.link = link;
    };

    baseItem.prototype.addChild = function(child) {
      this.child.puuh(child);
    };

    return baseItem;

  })();

  item = (function(superClass) {
    extend(item, superClass);

    function item(parent) {
      this.parent = parent;
    }

    item.prototype.setParent = function(parent) {
      this.parent = parent;
      this.parent = this.parent;
      this.parent.addChild(this.parent);
    };

    return item;

  })(baseItem);

  collection = (function(superClass) {
    extend(collection, superClass);

    function collection(items) {
      this.items = items;
    }

    collection.prototype.addItem = function(item1) {
      this.item = item1;
      this.items.push(this.item);
    };

    return collection;

  })(baseItem);

  module.exports = {
    baseItem: baseItem,
    item: item,
    collection: collection
  };

}).call(this);
