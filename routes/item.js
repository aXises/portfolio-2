// Generated by CoffeeScript 1.12.7
(function() {
  var baseItem, collection, item, team,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  baseItem = (function() {
    function baseItem(_id, name, status, type, link, description) {
      this._id = _id;
      this.name = name;
      this.status = status;
      this.type = type;
      this.link = link;
      this.description = description;
    }

    return baseItem;

  })();

  item = (function(superClass) {
    extend(item, superClass);

    function item(_id, name, status, type, link, description, date, technologies, images) {
      this._id = _id;
      this.name = name;
      this.status = status;
      this.type = type;
      this.link = link;
      this.description = description;
      this.date = date;
      this.technologies = technologies;
      this.images = images;
      item.__super__.constructor.call(this, this._id, this.name, this.status, this.type, this.link, this.description);
      this.itemType = 'item';
      this.collection = [];
    }

    item.prototype.setCollection = function(collection) {
      console.log('setting', collection);
      collection.addItem(this._id);
      if (!this.collection.includes(collection._id)) {
        return this.collection.push(collection._id);
      }
    };

    item.prototype.setTeam = function(team) {
      this.team = team._id;
      return team.addItem(this._id);
    };

    return item;

  })(baseItem);

  collection = (function(superClass) {
    extend(collection, superClass);

    function collection(_id, name, status, type, link, description, image, hasItems, showcase) {
      this._id = _id;
      this.name = name;
      this.status = status;
      this.type = type;
      this.link = link;
      this.description = description;
      this.image = image;
      this.hasItems = hasItems;
      this.showcase = showcase;
      collection.__super__.constructor.call(this, this._id, this.name, this.status, this.type, this.link, this.description);
      this.itemType = 'collection';
      if (!this.hasItems) {
        this.hasItems = [];
      }
    }

    collection.prototype.addItem = function(items) {
      return this.hasItems.push(items);
    };

    collection.prototype.setTeam = function(team) {
      return team.addCollection(this._id);
    };

    return collection;

  })(baseItem);

  team = (function() {
    function team(_id, name, logo, members1, site, description) {
      this._id = _id;
      this.name = name;
      this.logo = logo;
      this.members = members1;
      this.site = site;
      this.description = description;
      this.itemType = 'team';
      this.hasItems = [];
      this.hasCollections = [];
    }

    team.prototype.addMember = function(members) {
      var i, len, member, results;
      console.log(members, typeof members);
      if (typeof members === 'object') {
        results = [];
        for (i = 0, len = members.length; i < len; i++) {
          member = members[i];
          results.push(this.members.push(member));
        }
        return results;
      } else {
        return this.members.push(members);
      }
    };

    team.prototype.addItem = function(items) {
      return this.hasItems.push(items);
    };

    team.prototype.addCollection = function(collection) {
      return this.hasCollections.push(collection);
    };

    return team;

  })();

  module.exports = {
    item: item,
    collection: collection,
    team: team
  };

}).call(this);
