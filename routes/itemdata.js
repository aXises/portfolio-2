// Generated by CoffeeScript 1.12.7
(function() {
  var database, express, item, router;

  express = require('express');

  router = express.Router();

  database = require('../routes/database');

  item = require('../routes/item');

  router.post('/newItem', function(req, res, next) {
    var db, newItem, updateCollectionSet;
    db = database.getDb();
    newItem = new item.item(database.getId(), req.body.name, req.body.status, req.body.type, req.body.link, req.body.description, req.body.date, req.body.technologies, req.body.images);
    db.collection('collection').find({
      '_id': database.getId(req.body.collection)
    }).toArray(function(err, result) {
      var currentCollection;
      currentCollection = new item.collection(result[0]._id, result[0].name, result[0].status, result[0].type, result[0].link, result[0].description, result[0].image, result[0].hasItems);
      newItem.setCollection(currentCollection);
      db.collection('collection').update({
        '_id': database.getId(req.body.collection)
      }, currentCollection);
      db.collection('item').insert(newItem);
      return res.redirect('back');
    });
    return updateCollectionSet = function() {
      return db.collection('collection').find({
        '_id': database.getId(req.body.collection)
      }).toArray(function(err, result) {
        var currentCollection;
        currentCollection = new item.collection(result[0]._id, result[0].name, result[0].status, result[0].type, result[0].link, result[0].description, result[0].image, result[0].hasItems);
        newItem.setCollection(currentCollection);
        db.collection('item').insert(newItem);
        return db.collection('collection').update({
          '_id': database.getId(req.body.collection)
        }, currentCollection);
      });
    };
  });

  router.post('/getItem', function(req, res, next) {
    var db;
    db = database.getDb();
    return db.collection('item').find({
      '_id': database.getId(req.body.id)
    }).toArray(function(err, result) {
      return res.send(result[0]);
    });
  });

  router.post('/updateItem/:id', function(req, res, next) {
    var db;
    db = database.getDb();
    return db.collection('item').find({
      '_id': database.getId(req.params.id)
    }).toArray(function(err, result) {
      var editedItem;
      editedItem = new item.item(database.getId(req.params.id), req.body.name, req.body.status, req.body.type, req.body.link, req.body.description, req.body.date, req.body.technologies, req.body.images);
      return db.collection('item').update({
        '_id': database.getId(req.params.id)
      }, editedItem, function() {
        return res.redirect('back');
      });
    });
  });

  router.post('/deleteItem', function(req, res, next) {
    var db;
    db = database.getDb();
    return db.collection('item').find({
      '_id': database.getId(req.body.id)
    }).toArray(function(err, result) {
      var belongsTo;
      if (result[0].collection[0]) {
        belongsTo = result[0].collection[0];
        return db.collection('collection').find({
          '_id': database.getId(result[0].collection[0])
        }).toArray(function(err, result) {
          var currentCollection, i, id, len, ref, updatedItemList;
          updatedItemList = [];
          ref = result[0].hasItems;
          for (i = 0, len = ref.length; i < len; i++) {
            id = ref[i];
            if (belongsTo !== id) {
              updatedItemList.push(id);
            }
          }
          currentCollection = new item.collection(result[0]._id, result[0].name, result[0].status, result[0].type, result[0].link, result[0].description, result[0].image, updatedItemList);
          return db.collection('collection').update({
            '_id': database.getId(result[0].collection[0])
          }, currentCollection, function() {
            return db.collection('item').remove({
              '_id': database.getId(req.body.id)
            }, function() {
              return res.redirect('back');
            });
          });
        });
      } else {
        return db.collection('item').remove({
          '_id': database.getId(req.body.id)
        }, function() {
          return res.redirect('back');
        });
      }
    });
  });

  router.post('/deleteCollection', function(req, res, next) {
    var db;
    db = database.getDb();
    return db.collection('collection').find({
      '_id': database.getId(req.body.id)
    }).toArray(function(err, result) {
      return db.collection('item').remove({
        '_id': database.getId(req.body.id)
      }, function() {
        return res.redirect('back');
      });
    });
  });

  router.get('/', function(req, res, next) {
    return database.getDb().collection('item').find({}).toArray(function(err, items) {
      return database.getDb().collection('collection').find({}).toArray(function(err, collections) {
        return res.render('itemdata', {
          itemKeys: Object.keys(items),
          items: items,
          collectionKeys: Object.keys(collections),
          collections: collections
        });
      });
    });
  });

  module.exports = router;

}).call(this);
